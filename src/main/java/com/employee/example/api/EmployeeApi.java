/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.employee.example.api;

import com.employee.example.model.Employee;
import com.employee.example.model.Employees;
import com.employee.example.model.ErrorResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-09-12T19:18:35.042+05:30")

@Validated
@Api(value = "employee", description = "the employee API")
@RequestMapping(value = "/employee")
public interface EmployeeApi {

    Logger log = LoggerFactory.getLogger(EmployeeApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add an employee details to DB", nickname = "addEmployee", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Employee Updation Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "added successfully"),
        @ApiResponse(code = 400, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addEmployee(@ApiParam(value = "used for logging purpose as unqiue idenfier" ,required=true) @RequestHeader(value="x-requestid", required=true) String xRequestid,@ApiParam(value = "employee request body" ,required=true )  @Valid @RequestBody Employee employeeDetails) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EmployeeApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Delete an employee details", nickname = "deleteEmployeeBasedOnId", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Employee Updation Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful deleted"),
        @ApiResponse(code = 400, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/employee/{employeeid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteEmployeeBasedOnId(@ApiParam(value = "used for logging purpose as unqiue idenfier" ,required=true) @RequestHeader(value="x-requestid", required=true) String xRequestid,@ApiParam(value = "employee id",required=true) @PathVariable("employeeid") String employeeid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EmployeeApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fetch all employee", nickname = "getEmployee", notes = "Get all employee from the database.", response = Employees.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Employee Retrieval Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employees.class),
        @ApiResponse(code = 400, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Employees> getEmployee(@ApiParam(value = "used for logging purpose as unqiue idenfier" ,required=true) @RequestHeader(value="x-requestid", required=true) String xRequestid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"bytes\": [],  \"empty\": true}", Employees.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EmployeeApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Fetch employee details based on employee id", nickname = "getEmployeeBasedOnId", notes = "", response = Employee.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Employee Retrieval Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 400, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/employee/{employeeid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Employee> getEmployeeBasedOnId(@ApiParam(value = "used for logging purpose as unqiue idenfier" ,required=true) @RequestHeader(value="x-requestid", required=true) String xRequestid,@ApiParam(value = "employee id",required=true) @PathVariable("employeeid") String employeeid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\"empty\": false}", Employee.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EmployeeApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update an employee details", nickname = "updateEmployeeBasedOnId", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Employee Updation Endpoint", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful updated"),
        @ApiResponse(code = 400, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Request failed on server validation or request is invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/employee/{employeeid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateEmployeeBasedOnId(@ApiParam(value = "used for logging purpose as unqiue idenfier" ,required=true) @RequestHeader(value="x-requestid", required=true) String xRequestid,@ApiParam(value = "employee request body" ,required=true )  @Valid @RequestBody Employee employeeDetails) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default EmployeeApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
